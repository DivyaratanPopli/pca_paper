import sim_functions as sim
import fstatistics_functions as ff
import numpy as np

interval=2e6

total_f=1458 # total number of windows = length of human genome / length of window


rule eigenWrapper: # make it easier to input geno file with np
    input:
        genof="toy_example/all_ind.geno"
    output:
        outf="toy_example/all_ind.geno_pc",
    script: "Rscripts/convert_geno.R"


rule split_chrm:
    input:
        snp="toy_example/all_ind.snp"
    output:
        snp="data_files/chrm{ch}/all_ind.snp"
    shell: "awk '{{if ($2 == {wildcards.ch}) print $0}}' {input.snp} > {output.snp}"


rule splitEigen_ch: # divide each chromosome into small windows
    input:
        snpf="data_files/chrm{ch}/all_ind.snp",
    output:
        outf="data_files/chrm{ch}/n_blocks.csv"
    run:
        sim.split_eigen(snpf=input.snpf, outf=output.outf, interval=interval)

rule merge_block_info:
    input:
        blockf=expand("data_files/chrm{ch}/n_blocks.csv", ch=list(range(1,24)))
    output:
        outf="data_files/n_blocks.csv"
    run:
        sim.merge_blocks(blockf=input.blockf, outf=output.outf)


rule runAdmixtools2:
    input:
        prefix="toy_example/all_ind.geno",
        indf="toy_example/all_ind.ind",
    params:
        f2_dir="data_files/admixtools2_fmat"
    output:
        outf2="data_files/admixtools2/f2mat_mean.csv",
        outstd="data_files/admixtools2/f2mat_std.csv"
    script: "Rscripts/run_admixtools2.R"


rule ppcaMethods_sub:
    input:
        dataf= "toy_example/all_ind.geno_pc",
        filter="data_files/n_blocks.csv"
    output:
        outfile= "data_files/filter{f}/pcs_{method}/pcs_npcs{npcs}.csv",
        outfile_s= "data_files/filter{f}/pcs_{method}/pcs_npcs{npcs}.csv_scores",
        outfile_d= "data_files/filter{f}/pcs_{method}/pcs_npcs{npcs}_data_rec.csv",
        sigmaf= "data_files/filter{f}/pcs_{method}/pcs_npcs{npcs}_sigma.txt",
        evalf= "data_files/filter{f}/pcs_{method}/pcs_npcs{npcs}_eval.csv",
    script: "Rscripts/pca_methods_ppca_direct.R"


rule all_ppca:
    input:
        ppcaf= expand("data_files/filter{f}/pcs_ppca_miss/pcs_npcs{{npcs}}.csv",f=list(range(1,total_f+1))),
        filter1f="data_files/n_blocks.csv",
    output:
        p_mu="data_files/ppca_miss_val_scale{npcs}/ppca_mu.csv",
        p_std="data_files/ppca_miss_val_scale{npcs}/ppca_std.csv"
    run:
        ff.sd_ppca_all(ppcaf=input.ppcaf, outfile_mu=output.p_mu, outfile_std=output.p_std,
            scale=wildcards.npcs, filter1f=input.filter1f, npcs=wildcards.npcs)

rule f2mat:
    input:
        popf="toy_example/all_ind.ind",
        missf=expand("data_files/filter{f}/pcs_ppca_miss/pcs_npcs{{npcs}}.csv", f=list(range(1,total_f+1))),
        filter1f="data_files/n_blocks.csv",
    output:
        f2mat_mean_ppca="data_files/f2mat_mean_ppca_scale{npcs}.csv",
        f2mat_std_ppca="data_files/f2mat_std_ppca_scale{npcs}.csv",
    run:
        ff.f2stats(dataf=input.missf, popf=input.popf, filter1f= input.filter1f, scale=wildcards.npcs,fout_std=output.f2mat_std_ppca, fout_mean=output.f2mat_mean_ppca)


rule all:
    input:
        f2_mean_ppca=expand("data_files/f2mat_mean_ppca_scale{npcs}.csv", npcs=config['npcs']),
        f2_std_ppca=expand("data_files/f2mat_std_ppca_scale{npcs}.csv",npcs=config['npcs']),
        f2_mean_admixtools2="data_files/admixtools2/f2mat_mean.csv",
        f2_std_admixtools2="data_files/admixtools2/f2mat_std.csv"
